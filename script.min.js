const _0x24f09e = _0x1686; (function (_0x5bf2b7, _0x11ae62) { const _0x254133 = _0x1686, _0x462055 = _0x5bf2b7(); while (!![]) { try { const _0x5c6b8d = -parseInt(_0x254133(0x1dc)) / 0x1 + -parseInt(_0x254133(0x1e7)) / 0x2 * (-parseInt(_0x254133(0x1d3)) / 0x3) + -parseInt(_0x254133(0x1e9)) / 0x4 + parseInt(_0x254133(0x20b)) / 0x5 + -parseInt(_0x254133(0x23b)) / 0x6 + -parseInt(_0x254133(0x21f)) / 0x7 + parseInt(_0x254133(0x203)) / 0x8; if (_0x5c6b8d === _0x11ae62) break; else _0x462055['push'](_0x462055['shift']()); } catch (_0x3332f8) { _0x462055['push'](_0x462055['shift']()); } } }(_0x1c04, 0x666ea)); const { Application, live2d: { Live2DModel, MotionPreloadStrategy }, Sprite, Texture, Ticker } = PIXI, { Face, Vector: { lerp }, Utils: { clamp } } = Kalidokit, urlParams = new URLSearchParams(window[_0x24f09e(0x204)][_0x24f09e(0x1e8)]); function _0x1c04() { const _0x55e2d2 = ['result', 'coreModel', 'offsetX', 'getBoundingClientRect', 'eyeBlink', '#live2d', 'stabilizeBlink', 'muted', 'json', 'getElementById', 'modelUrl', '.json', 'eye', '976164NQRDxQ', 'baseTexture', 'dragging', 'scale', 'createObjectURL', 'error', 'video', 'auto', 'ParamBodyAngleZ', '619027EHMEHn', 'focus', 'setParameterValueById', 'shared', 'setEyeParams', 'addChild', 'interactive', 'offsetY', 'degrees', 'click', 'data', '2iBjdXr', 'search', '1756428QaorKj', 'width', 'getContext', 'querySelector', 'ParamMouthForm', 'ParamEyeBallY', 'ParamBodyAngleY', 'setOptions', 'send', 'ParamAngleY', 'ParamBodyAngleX', 'backgroundVideoUpload', 'preventDefault', 'setBackgroundImage', 'getParameterValueById', 'length', 'pointerup', 'split', 'loop', 'videoHeight', 'ParamEyeLOpen', 'ParamAngleX', 'start', 'undefined', 'ParamMouthOpenY', '纹理创建失败或未加载完成', '10599064QusziI', 'location', 'play', 'pointerdown', 'endsWith', 'function', 'then', 'stage', '2909995iMhpQf', 'ParamEyeBallX', 'value', 'forEach', '#ffe603', 'backgroundUpload', 'onload', 'PARAM_MOUTH_OPEN_Y', 'addEventListener', 'innerHeight', 'add', './models/hiyori/hiyori_pro_t10.model3.json', 'live2d', 'NONE', 'eyeParamValue', 'position', 'set', 'anchor', 'global', 'videoWidth', '4532500ziOpQt', 'setParamFloat', 'change', 'motions', 'canplaythrough', 'mouth', 'height', 'https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/', 'get', 'head', 'resource', 'removeChild', 'dispatchEvent', 'detail', 'url', 'clearButton', '.input_video', 'onResults', 'preload', 'uploadButton', 'uploadVideoButton', 'internalModel', 'target', 'loadstart', 'addChildAt', 'setBackgroundVideo', 'ParamEyeROpen', 'multiFaceLandmarks', '642444qOXqxY', 'screen', 'pupil', 'ParamAngleZ', 'update', 'from', 'files', 'Application']; _0x1c04 = function () { return _0x55e2d2; }; return _0x1c04(); } let modelUrl = urlParams[_0x24f09e(0x227)](_0x24f09e(0x1d0)) || _0x24f09e(0x216); if (modelUrl[_0x24f09e(0x207)](_0x24f09e(0x1d1))) { let json = await fetch(modelUrl)[_0x24f09e(0x209)](_0x442b50 => _0x442b50[_0x24f09e(0x1ce)]()); json[_0x24f09e(0x22d)] = json[_0x24f09e(0x22d)] || modelUrl; const selectedMotionsParam = urlParams['get']('selectedMotions'), selectedMotions = selectedMotionsParam ? selectedMotionsParam[_0x24f09e(0x1fa)](',') : []; if (selectedMotions[_0x24f09e(0x1f8)] === 0x0) json[_0x24f09e(0x222)] = {}; else { const newMotions = {}; selectedMotions[_0x24f09e(0x20e)](_0x3f7a0c => { const _0x5b1c50 = _0x24f09e; json[_0x5b1c50(0x222)][_0x3f7a0c] && (newMotions[_0x3f7a0c] = json['motions'][_0x3f7a0c]); }), json['motions'] = newMotions; } modelUrl = json; } let currentModel, facemesh, app, backgroundSprite; const videoElement = document[_0x24f09e(0x1ec)](_0x24f09e(0x22f)), guideCanvas = document['querySelector']('canvas.guides'); function _0x1686(_0x1145de, _0x3308ec) { const _0x1c047b = _0x1c04(); return _0x1686 = function (_0x1686a6, _0x3afbc9) { _0x1686a6 = _0x1686a6 - 0x1c4; let _0x2cda7f = _0x1c047b[_0x1686a6]; return _0x2cda7f; }, _0x1686(_0x1145de, _0x3308ec); } (async function () { const _0x9aaf36 = _0x24f09e; app = new PIXI[(_0x9aaf36(0x1c5))]({ 'view': document['getElementById']('live2d'), 'autoStart': !0x0, 'backgroundAlpha': 0x0, 'backgroundColor': 0xffffff, 'resizeTo': window }), currentModel = await Live2DModel[_0x9aaf36(0x240)](modelUrl, { 'autoInteract': !0x1, 'motionPreload': MotionPreloadStrategy[_0x9aaf36(0x218)] }), currentModel[_0x9aaf36(0x1d6)]['set'](0.4), currentModel[_0x9aaf36(0x1e2)] = !0x0, currentModel[_0x9aaf36(0x21c)]['set'](0.5, 0.5), currentModel[_0x9aaf36(0x21a)][_0x9aaf36(0x21b)](window['innerWidth'] * 0.5, window[_0x9aaf36(0x214)] * 0.8), currentModel['on'](_0x9aaf36(0x206), _0x1f880c => { const _0x55abfa = _0x9aaf36; currentModel['offsetX'] = _0x1f880c[_0x55abfa(0x1e6)][_0x55abfa(0x21d)]['x'] - currentModel[_0x55abfa(0x21a)]['x'], currentModel[_0x55abfa(0x1e3)] = _0x1f880c[_0x55abfa(0x1e6)][_0x55abfa(0x21d)]['y'] - currentModel[_0x55abfa(0x21a)]['y'], currentModel[_0x55abfa(0x1d5)] = !0x0; }), currentModel['on'](_0x9aaf36(0x1f9), _0xc0ef1f => { const _0x5b04a1 = _0x9aaf36; currentModel[_0x5b04a1(0x1d5)] = !0x1; }), currentModel['on']('pointermove', _0x48d1eb => { const _0x2d5b28 = _0x9aaf36; currentModel[_0x2d5b28(0x1d5)] && currentModel[_0x2d5b28(0x21a)][_0x2d5b28(0x21b)](_0x48d1eb['data'][_0x2d5b28(0x21d)]['x'] - currentModel[_0x2d5b28(0x1c8)], _0x48d1eb['data'][_0x2d5b28(0x21d)]['y'] - currentModel[_0x2d5b28(0x1e3)]); }), document[_0x9aaf36(0x1ec)](_0x9aaf36(0x1cb))[_0x9aaf36(0x213)]('wheel', _0x3b476a => { const _0xde54d8 = _0x9aaf36; _0x3b476a[_0xde54d8(0x1f5)](), currentModel[_0xde54d8(0x1d6)][_0xde54d8(0x21b)](clamp(currentModel[_0xde54d8(0x1d6)]['x'] + _0x3b476a['deltaY'] * -0.001, -0.5, 0xa)); }), app[_0x9aaf36(0x20a)][_0x9aaf36(0x1e1)](currentModel), facemesh = new FaceMesh({ 'locateFile': _0x1103f4 => _0x9aaf36(0x226) + _0x1103f4 }), facemesh[_0x9aaf36(0x1f0)]({ 'maxNumFaces': 0x1, 'refineLandmarks': !0x0, 'minDetectionConfidence': 0.5, 'minTrackingConfidence': 0.5 }), facemesh[_0x9aaf36(0x230)](onResults), startCamera(), window[_0x9aaf36(0x213)]('clearBackgroundImage', function () { const _0x3ebed3 = _0x9aaf36; backgroundSprite && app[_0x3ebed3(0x20a)][_0x3ebed3(0x22a)](backgroundSprite); }), window['addEventListener'](_0x9aaf36(0x1f6), function (_0x349b97) { const _0x264a74 = _0x9aaf36, _0x91cc2e = _0x349b97[_0x264a74(0x22c)]; backgroundSprite && app['stage']['removeChild'](backgroundSprite); const _0x5e0cae = Texture[_0x264a74(0x240)](_0x91cc2e); backgroundSprite = new Sprite(_0x5e0cae), backgroundSprite[_0x264a74(0x1ea)] = app[_0x264a74(0x23c)][_0x264a74(0x1ea)], backgroundSprite['height'] = app[_0x264a74(0x23c)][_0x264a74(0x225)], app[_0x264a74(0x20a)][_0x264a74(0x237)](backgroundSprite, 0x0); }), window[_0x9aaf36(0x213)](_0x9aaf36(0x238), function (_0x3c0791) { const _0x1fd619 = _0x9aaf36, _0x51a06c = _0x3c0791[_0x1fd619(0x22c)]; _0x51a06c[_0x1fd619(0x205)](), _0x51a06c[_0x1fd619(0x213)](_0x1fd619(0x223), function () { const _0x4caa21 = _0x1fd619; backgroundSprite && app[_0x4caa21(0x20a)][_0x4caa21(0x22a)](backgroundSprite); const _0x7a97c0 = Texture[_0x4caa21(0x240)](_0x51a06c); if (_0x7a97c0[_0x4caa21(0x1d4)][_0x4caa21(0x229)]['source'][_0x4caa21(0x1fb)] = !0x0, !_0x7a97c0 || _0x7a97c0['baseTexture']['hasLoaded'] === !0x1) { console[_0x4caa21(0x1d8)](_0x4caa21(0x202)); return; } backgroundSprite = new Sprite(_0x7a97c0), backgroundSprite[_0x4caa21(0x231)] = _0x4caa21(0x1da), backgroundSprite['width'] = app[_0x4caa21(0x23c)]['width'], backgroundSprite[_0x4caa21(0x225)] = app[_0x4caa21(0x23c)][_0x4caa21(0x225)], app[_0x4caa21(0x20a)]['addChildAt'](backgroundSprite, 0x0), Ticker[_0x4caa21(0x1df)][_0x4caa21(0x215)](() => { const _0x47ee6d = _0x4caa21; _0x7a97c0[_0x47ee6d(0x23f)](); }); }), _0x51a06c['play'](); }); }()); const onResults = _0x2b0133 => { const _0x38a08a = _0x24f09e; drawResults(_0x2b0133[_0x38a08a(0x23a)][0x0]), animateLive2DModel(_0x2b0133[_0x38a08a(0x23a)][0x0]); }, drawResults = _0x568cc0 => { const _0x2ac921 = _0x24f09e; if (!guideCanvas || !videoElement || !_0x568cc0) return; guideCanvas[_0x2ac921(0x1ea)] = videoElement[_0x2ac921(0x21e)], guideCanvas['height'] = videoElement[_0x2ac921(0x1fc)]; let _0xfb3975 = guideCanvas[_0x2ac921(0x1eb)]('2d'); _0xfb3975['save'](), _0xfb3975['clearRect'](0x0, 0x0, guideCanvas[_0x2ac921(0x1ea)], guideCanvas['height']), drawConnectors(_0xfb3975, _0x568cc0, FACEMESH_TESSELATION, { 'color': '#C0C0C070', 'lineWidth': 0x1 }), _0x568cc0 && _0x568cc0['length'] === 0x1de && drawLandmarks(_0xfb3975, [_0x568cc0[0x1d4], _0x568cc0[0x1d4 + 0x5]], { 'color': _0x2ac921(0x20f), 'lineWidth': 0x2 }); }, animateLive2DModel = _0x7b0776 => { const _0x4bd7ee = _0x24f09e; if (!currentModel || !_0x7b0776) return; let _0x3134fc; if (_0x7b0776) { _0x3134fc = Face['solve'](_0x7b0776, { 'runtime': 'mediapipe', 'video': videoElement }); const _0x240eac = currentModel[_0x4bd7ee(0x234)][_0x4bd7ee(0x1c7)], _0x5a5f07 = typeof _0x240eac[_0x4bd7ee(0x1f7)] == _0x4bd7ee(0x208) && typeof _0x240eac[_0x4bd7ee(0x1de)] == 'function'; if (_0x5a5f07) { const _0x3fa5e7 = [_0x4bd7ee(0x20c), _0x4bd7ee(0x1ee), _0x4bd7ee(0x1fe), _0x4bd7ee(0x1f2), _0x4bd7ee(0x23e), _0x4bd7ee(0x1f3), 'ParamBodyAngleY', _0x4bd7ee(0x1db), _0x4bd7ee(0x1fd), 'ParamEyeROpen', _0x4bd7ee(0x201), _0x4bd7ee(0x1ed)]; let _0xda0ef3 = !0x0; for (const _0x176eaa of _0x3fa5e7) if (typeof _0x240eac[_0x4bd7ee(0x1f7)](_0x176eaa) == _0x4bd7ee(0x200)) { _0xda0ef3 = !0x1; break; } _0xda0ef3 ? rigFace(_0x3134fc, 0.5) : focusFace(_0x3134fc, _0x7b0776, 0.5); } else focusFace(_0x3134fc, _0x7b0776, 0.5); } }, focusFace = _0x3979e5 => { const _0x2a1e2d = _0x24f09e; if (!currentModel || !_0x3979e5) return; const _0x11ba13 = currentModel[_0x2a1e2d(0x234)][_0x2a1e2d(0x1c7)], _0x371e6e = document['getElementById'](_0x2a1e2d(0x217)), _0x1d1d37 = _0x371e6e[_0x2a1e2d(0x1c9)](), { degrees: _0x397630 } = _0x3979e5[_0x2a1e2d(0x228)], _0x4279c4 = _0x1d1d37[_0x2a1e2d(0x1ea)] / 0x2, _0x567cfd = _0x1d1d37[_0x2a1e2d(0x225)] / 0x2, _0x45242b = 0x5, _0xd5915 = _0x397630['y'] / _0x45242b * (_0x1d1d37['width'] / 0x2), _0x1855bd = -_0x397630['x'] / _0x45242b * (_0x1d1d37['height'] / 0x2), _0x1698a1 = _0x4279c4 + _0xd5915, _0x16a43c = _0x567cfd + _0x1855bd; currentModel[_0x2a1e2d(0x1dd)](_0x1698a1, _0x16a43c), _0x11ba13[_0x2a1e2d(0x220)](_0x2a1e2d(0x212), lerp(_0x3979e5[_0x2a1e2d(0x224)]['y'], _0x11ba13['getParamFloat'](_0x2a1e2d(0x212)), 0.3)), currentModel[_0x2a1e2d(0x234)]['eyeBlink'][_0x2a1e2d(0x1e0)](lerp(_0x3979e5['eye']['l'], currentModel[_0x2a1e2d(0x234)][_0x2a1e2d(0x1ca)][_0x2a1e2d(0x219)], 0.3)); }, rigFace = (_0x7e74ac, _0x2f5178 = 0.7) => { const _0x2ad8a0 = _0x24f09e; if (!currentModel || !_0x7e74ac) return; const _0x3c45cf = currentModel[_0x2ad8a0(0x234)][_0x2ad8a0(0x1c7)]; currentModel[_0x2ad8a0(0x234)]['motionManager'][_0x2ad8a0(0x23f)] = (..._0x3fa836) => { const _0xb83364 = _0x2ad8a0; currentModel[_0xb83364(0x234)][_0xb83364(0x1ca)] = void 0x0, _0x3c45cf[_0xb83364(0x1de)](_0xb83364(0x20c), lerp(_0x7e74ac[_0xb83364(0x23d)]['x'], _0x3c45cf[_0xb83364(0x1f7)]('ParamEyeBallX'), _0x2f5178)), _0x3c45cf[_0xb83364(0x1de)](_0xb83364(0x1ee), lerp(_0x7e74ac[_0xb83364(0x23d)]['y'], _0x3c45cf[_0xb83364(0x1f7)](_0xb83364(0x1ee)), _0x2f5178)), _0x3c45cf[_0xb83364(0x1de)](_0xb83364(0x1fe), lerp(_0x7e74ac[_0xb83364(0x228)]['degrees']['y'], _0x3c45cf[_0xb83364(0x1f7)](_0xb83364(0x1fe)), _0x2f5178)), _0x3c45cf['setParameterValueById'](_0xb83364(0x1f2), lerp(_0x7e74ac[_0xb83364(0x228)]['degrees']['x'], _0x3c45cf[_0xb83364(0x1f7)](_0xb83364(0x1f2)), _0x2f5178)), _0x3c45cf['setParameterValueById'](_0xb83364(0x23e), lerp(_0x7e74ac['head'][_0xb83364(0x1e4)]['z'], _0x3c45cf[_0xb83364(0x1f7)]('ParamAngleZ'), _0x2f5178)); const _0x33420d = 0.3; _0x3c45cf['setParameterValueById'](_0xb83364(0x1f3), lerp(_0x7e74ac[_0xb83364(0x228)][_0xb83364(0x1e4)]['y'] * _0x33420d, _0x3c45cf[_0xb83364(0x1f7)]('ParamBodyAngleX'), _0x2f5178)), _0x3c45cf[_0xb83364(0x1de)](_0xb83364(0x1ef), lerp(_0x7e74ac[_0xb83364(0x228)][_0xb83364(0x1e4)]['x'] * _0x33420d, _0x3c45cf[_0xb83364(0x1f7)](_0xb83364(0x1ef)), _0x2f5178)), _0x3c45cf['setParameterValueById']('ParamBodyAngleZ', lerp(_0x7e74ac['head'][_0xb83364(0x1e4)]['z'] * _0x33420d, _0x3c45cf[_0xb83364(0x1f7)](_0xb83364(0x1db)), _0x2f5178)); let _0x43d0f3 = Kalidokit['Face'][_0xb83364(0x1cc)]({ 'l': lerp(_0x7e74ac[_0xb83364(0x1d2)]['l'], _0x3c45cf['getParameterValueById'](_0xb83364(0x1fd)), 0.7), 'r': lerp(_0x7e74ac[_0xb83364(0x1d2)]['r'], _0x3c45cf['getParameterValueById']('ParamEyeROpen'), 0.7) }, _0x7e74ac['head']['y'], { 'enableWink': !0x0, 'maxRot': 0.5 }); _0x3c45cf['setParameterValueById'](_0xb83364(0x1fd), _0x43d0f3['l']), _0x3c45cf['setParameterValueById'](_0xb83364(0x239), _0x43d0f3['r']), _0x3c45cf[_0xb83364(0x1de)](_0xb83364(0x201), lerp(_0x7e74ac['mouth']['y'], _0x3c45cf['getParameterValueById'](_0xb83364(0x201)), 0.3)), _0x3c45cf[_0xb83364(0x1de)](_0xb83364(0x1ed), 0.3 + lerp(_0x7e74ac[_0xb83364(0x224)]['x'], _0x3c45cf['getParameterValueById'](_0xb83364(0x1ed)), 0.3)); }; }, startCamera = () => { const _0x12593c = _0x24f09e, _0x4d379b = new Camera(videoElement, { 'onFrame': async () => { const _0x24fb52 = _0x1686; await facemesh[_0x24fb52(0x1f1)]({ 'image': videoElement }); }, 'width': 0x280, 'height': 0x1e0 }); _0x4d379b[_0x12593c(0x1ff)](); }; var uploadvideo = null; document['getElementById'](_0x24f09e(0x22e))[_0x24f09e(0x213)](_0x24f09e(0x1e5), function () { const _0x20d9f0 = _0x24f09e; uploadvideo && (uploadvideo['pause'](), uploadvideo = null, document[_0x20d9f0(0x1cf)]('backgroundVideoUpload')[_0x20d9f0(0x20d)] = '', document['getElementById'](_0x20d9f0(0x210))[_0x20d9f0(0x20d)] = ''), window['dispatchEvent'](new CustomEvent('clearBackgroundImage')); }), document[_0x24f09e(0x1cf)](_0x24f09e(0x232))[_0x24f09e(0x213)](_0x24f09e(0x1e5), function () { const _0x248411 = _0x24f09e; document[_0x248411(0x1cf)](_0x248411(0x210))[_0x248411(0x1e5)](); }), document[_0x24f09e(0x1cf)](_0x24f09e(0x210))[_0x24f09e(0x213)](_0x24f09e(0x221), function (_0x33dd12) { const _0x22567a = _0x24f09e, _0x348770 = _0x33dd12[_0x22567a(0x235)]['files'][0x0]; if (_0x348770) { const _0xeff712 = new FileReader(); _0xeff712[_0x22567a(0x211)] = function (_0x3576a3) { const _0x1d4138 = _0x22567a, _0x5f341a = new Image(); _0x5f341a['src'] = _0x3576a3[_0x1d4138(0x235)][_0x1d4138(0x1c6)], _0x5f341a['onload'] = function () { const _0x58cd38 = _0x1d4138; window[_0x58cd38(0x22b)](new CustomEvent('setBackgroundImage', { 'detail': _0x5f341a })); }; }, _0xeff712['readAsDataURL'](_0x348770); } }), document[_0x24f09e(0x1cf)](_0x24f09e(0x233))[_0x24f09e(0x213)](_0x24f09e(0x1e5), function () { const _0xa7f13a = _0x24f09e; document['getElementById'](_0xa7f13a(0x1f4))['click'](); }), document[_0x24f09e(0x1cf)](_0x24f09e(0x1f4))[_0x24f09e(0x213)](_0x24f09e(0x221), function (_0x3ba4dc) { const _0x4ce85e = _0x24f09e, _0x4da3f1 = _0x3ba4dc['target'][_0x4ce85e(0x1c4)][0x0]; _0x4da3f1 && (uploadvideo = document['createElement'](_0x4ce85e(0x1d9)), uploadvideo['src'] = URL[_0x4ce85e(0x1d7)](_0x4da3f1), uploadvideo['loop'] = !0x0, uploadvideo[_0x4ce85e(0x1cd)] = !0x0, uploadvideo['autoplay'] = !0x0, uploadvideo[_0x4ce85e(0x213)](_0x4ce85e(0x236), function () { uploadvideo['onloadedmetadata'] = function () { const _0xa06882 = _0x1686; window[_0xa06882(0x22b)](new CustomEvent('setBackgroundVideo', { 'detail': uploadvideo })); }; }), uploadvideo['addEventListener'](_0x4ce85e(0x1d8), function () { }), uploadvideo[_0x4ce85e(0x205)]()['catch'](_0x5a35e2 => { })); });